<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dashboard | Forge Desk</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background-color: var(--bg-color);
      color: var(--text-color);
      transition: 0.3s ease;
    }

    :root {
      --bg-color: #f0f2f5;
      --text-color: #333;
      --header-bg: linear-gradient(90deg, #1e3c72, #2a5298);
      --sidebar-bg: #1f1f2e;
      --card-bg: #f8f9fa;
      --hover-bg: #373753;
    }

    body.dark {
      --bg-color: #121212;
      --text-color: #f0f0f0;
      --header-bg: linear-gradient(90deg, #0f2027, #203a43);
      --sidebar-bg: #1a1a2e;
      --card-bg: #1f1f2e;
      --hover-bg: #333;
    }

    header {
      width: 100%;
      position: fixed;
      top: 0;
      left: 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 30px;
      background: var(--header-bg);
      color: white;
      height: 80px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      z-index: 1000;
    }

    .logo img {
      border-radius: 50%;
      object-fit: cover;
      width: 60px;
      height: 60px;
      border: 2px solid white;
    }

    .title {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      font-size: 2rem;
      font-weight: bold;
      letter-spacing: 2px;
    }

    header nav {
      display: flex;
      gap: 15px;
    }

    header nav a {
      font-size: 0.9rem;
      padding: 6px 14px;
      border-radius: 6px;
      background-color: #ffffff33;
      color: white;
      text-decoration: none;
      cursor: pointer;
      transition: 0.3s ease;
    }

    header nav a:hover {
      background-color: #1e3c72;
      transform: translateY(-2px);
    }

    .container {
      display: flex;
      height: calc(100vh - 80px);
      margin-top: 80px;
    }

    .sidebar {
      width: 220px;
      background-color: var(--sidebar-bg);
      color: white;
      padding: 30px 20px;
      display: flex;
      flex-direction: column;
    }

    .sidebar .profile {
      text-align: center;
      margin-bottom: 40px;
    }

    .sidebar .profile img {
      width: 90px;
      height: 90px;
      border-radius: 50%;
      border: 3px solid #fff;
      margin-bottom: 10px;
      object-fit: cover;
    }

    .sidebar .profile p {
      font-size: 1.1rem;
      font-weight: bold;
    }

    .sidebar ul {
      list-style: none;
      padding-left: 0;
    }

    .sidebar ul a {
      display: block;
      color: white;
      padding: 12px 15px;
      margin-bottom: 10px;
      border-radius: 6px;
      transition: 0.3s ease;
      text-decoration: none;
      text-align: center;
    }

    .sidebar ul a:hover {
      background-color: var(--hover-bg);
    }

    .main-content {
      flex: 1;
      padding: 40px;
      background-color: var(--card-bg);
      overflow-y: auto;
      border-left: 1px solid #ddd;
    }

    .main-content h2 {
      margin-bottom: 15px;
      color: #1e3c72;
    }

    .main-content p {
      font-size: 1rem;
      line-height: 1.6;
    }

    .project-card {
      background: var(--bg-color);
      padding: 15px;
      margin: 10px 0;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .project-card h3 {
      margin-bottom: 5px;
      color: #1e3c72;
    }

    .countdown {
      color: #d9534f;
      font-weight: bold;
    }

    @media (max-width: 768px) {
      header {
        flex-direction: column;
        height: auto;
        padding: 15px;
      }

      .title {
        position: static;
        transform: none;
        margin-top: 10px;
      }

      .container {
        flex-direction: column;
      }

      .sidebar {
        width: 100%;
        flex-direction: row;
        overflow-x: auto;
        justify-content: space-around;
        align-items: center;
        padding: 10px;
      }

      .sidebar .profile {
        display: none;
      }

      .sidebar ul {
        display: flex;
        flex-direction: row;
        gap: 10px;
      }

      .main-content {
        padding: 20px;
      }
    }
  </style>
</head>
<body>

  <header>
    <div class="logo">
      <img src="Logo.jpg" alt="Logo" />
    </div>

    <div class="title">FORGE DESK</div>

    <nav>
      <a href="#" id="themeToggle" title="Toggle Theme"><i class="fa-solid fa-moon"></i></a>
      <a href="dashboard.htm" title="Dashboard"><i class="fa-solid fa-house"></i></a>
      <a href="about.htm" title="About"><i class="fa-solid fa-circle-info"></i></a>
      <a href="contact.htm" title="Contact"><i class="fa-solid fa-envelope"></i></a>
      <a href="#" onclick="logout()" title="Logout"><i class="fa-solid fa-right-from-bracket"></i></a>
    </nav>
  </header>

  <div class="container">
    <aside class="sidebar">
      <div>
        <div class="profile">
          <img src="https://via.placeholder.com/90" alt="User Profile" id="profileImage" />
          <p id="usernameDisplay">Username</p>
        </div>
        <ul>
          <a href="Team.html" title="Teams"><i class="fa-solid fa-users"></i></a>
          <a href="work_area.html" title="Work Area"><i class="fa-solid fa-briefcase"></i></a>
        </ul>
      </div>
    </aside>

    <div class="main-content">
      <h2>Welcome to Forge Desk</h2>
      <p id="welcomeText">Loading user info...</p>

      <h1>My Assigned Projects</h1>
      <div id="projectList"></div>
    </div>
  </div>

  <script>
    const themeToggle = document.getElementById("themeToggle");
    const currentTheme = localStorage.getItem("theme");

    if (currentTheme === "dark") {
      document.body.classList.add("dark");
    }

    themeToggle.addEventListener("click", () => {
      document.body.classList.toggle("dark");
      const theme = document.body.classList.contains("dark") ? "dark" : "light";
      localStorage.setItem("theme", theme);
    });

    const user = JSON.parse(localStorage.getItem("currentUser"));

    if (!user) {
      alert("You must log in first.");
      window.location.href = "login.html";
    } else {
      document.getElementById("usernameDisplay").innerText = user.username;
      const profileImg = document.getElementById("profileImage");
      if (user.photo) profileImg.src = user.photo;
      document.getElementById("welcomeText").innerText = `Welcome, ${user.name}! This is your project management dashboard.`;
    }

    function logout() {
      const currentUser = JSON.parse(localStorage.getItem("currentUser"));
      let users = JSON.parse(localStorage.getItem("users")) || [];
      users = users.filter(u => u.username !== currentUser.username);
      localStorage.setItem("users", JSON.stringify(users));

      let projects = JSON.parse(localStorage.getItem("projects")) || [];
      projects = projects.map(project => {
        project.members = project.members.filter(member => member !== currentUser.name);
        return project;
      });
      localStorage.setItem("projects", JSON.stringify(projects));

      localStorage.removeItem("currentUser");
      alert("Logged out and removed from users/projects.");
      window.location.href = "login.html";
    }

    const currentUser = JSON.parse(localStorage.getItem("currentUser"));
    const allProjects = JSON.parse(localStorage.getItem("projects")) || [];
    const container = document.getElementById("projectList");

    if (!currentUser) {
      container.innerHTML = "<p>User not logged in.</p>";
    } else {
      const myProjects = allProjects.filter(project => project.members.includes(currentUser.name));

      if (myProjects.length === 0) {
        container.innerHTML = "<p>No projects assigned to you.</p>";
      } else {
       myProjects.forEach((project, index) => {
  const div = document.createElement("div");
  div.className = "project-card";
  div.style.position = "relative"; // for positioning delete button

  const deadline = new Date(project.deadline);
  const id = `countdown-${index}`;

  div.innerHTML = `
    <h3>${project.projectName}</h3>
    <p><strong>Team:</strong> ${project.teamName}</p>
    <p><strong>Deadline:</strong> ${deadline.toLocaleString()}</p>
    <p class="countdown" id="${id}">Loading...</p>
    <button class="delete-btn">Delete</button>
  `;

  // Navigate to project on card click (excluding the delete button)
  div.addEventListener("click", (e) => {
    if (e.target.classList.contains("delete-btn")) return; // prevent conflict
    localStorage.setItem("selectedProject", JSON.stringify(project));
    window.location.href = "work_area.html";
  });

  // Delete project
  div.querySelector(".delete-btn").addEventListener("click", (e) => {
    e.stopPropagation(); // prevent triggering card click
    if (confirm(`Are you sure you want to delete project "${project.projectName}"?`)) {
      const updatedProjects = allProjects.filter(p => p.projectName !== project.projectName || p.teamName !== project.teamName);
      localStorage.setItem("projects", JSON.stringify(updatedProjects));
      div.remove(); // remove from DOM
    }
  });

  container.appendChild(div);
  startCountdown(deadline, id);
});

      }
    }

    function startCountdown(deadline, elementId) {
      function update() {
        const now = new Date();
        const diff = deadline - now;
        const el = document.getElementById(elementId);

        if (diff <= 0) {
          el.innerText = "⏰ Deadline Passed";
          clearInterval(interval);
          return;
        }

        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
        const minutes = Math.floor((diff / (1000 * 60)) % 60);
        const seconds = Math.floor((diff / 1000) % 60);

        el.innerText = `${days}d ${hours}h ${minutes}m ${seconds}s`;
      }

      update();
      const interval = setInterval(update, 1000);
    }
  </script>
</body>
</html>
